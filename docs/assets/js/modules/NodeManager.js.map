{"version":3,"sources":["modules/NodeManager.js"],"names":["NodeManager","nodes","i","rawNodes","rawNode","isCity","id","City","Node","nodeIDs","floor","random","length","cityIDsWithoutStuttgart","cityIDs","func","nodeIndex","name","cityDict","getByName","potentialTowns","node","charge","push","Nodes","console","log"],"mappings":";;;;;;IAAMA,W;AACF,2BAAc;AAAA;;AACV,aAAKC,KAAL,GAAa,EAAb;;AAEA,aAAI,IAAIC,CAAR,IAAaC,QAAb,EAAuB;AACnB,gBAAIC,UAAUD,SAASD,CAAT,CAAd;;AAEA,gBAAGE,QAAQC,MAAX,EAAmB;AACf,qBAAKJ,KAAL,CAAWG,QAAQE,EAAnB,IAAyB,IAAIC,IAAJ,CAASH,OAAT,CAAzB;AACH,aAFD,MAEO;AACH,qBAAKH,KAAL,CAAWG,QAAQE,EAAnB,IAAyB,IAAIE,IAAJ,CAASJ,OAAT,CAAzB;AACH;AAEJ;AACJ;;;;wCAEe;AACZ,mBAAO,KAAKH,KAAL,CAAWQ,QAAQC,MAAMC,OAAO,CAAP,EAAUF,QAAQG,MAAlB,CAAN,CAAR,CAAX,CAAP;AACH;;;wCAEe;AACZ,mBAAO,KAAKX,KAAL,CAAWY,wBAAwBH,MAAMC,OAAO,CAAP,EAAUE,wBAAwBD,MAAlC,CAAN,CAAxB,CAAX,CAAP;AACH;;;wCAEe;AACZ,mBAAO,KAAKX,KAAL,CAAWa,QAAQJ,MAAMC,OAAO,CAAP,EAAUG,QAAQF,MAAlB,CAAN,CAAR,CAAX,CAAP;AACH;;;+BAEMG,I,EAAM;AACT,iBAAI,IAAIC,SAAR,IAAqB,KAAKf,KAA1B,EAAiC;AAC7Bc,qBAAKC,SAAL,EAAgB,KAAKf,KAAL,CAAWe,SAAX,CAAhB;AACH;AACJ;;;gCAEOV,E,EAAI;AACR,mBAAO,KAAKL,KAAL,CAAWK,EAAX,CAAP;AACH;;;kCAESW,I,EAAM;AACZ,mBAAO,KAAKhB,KAAL,CAAWiB,SAASD,IAAT,CAAX,CAAP;AACH;;;uCAEc;AACX,mBAAO,KAAKE,SAAL,CAAe,WAAf,CAAP;AACH;;;mDAE0B;AACvB,gBAAIC,iBAAiB,EAArB;;AAEA,iBAAI,IAAIlB,CAAR,IAAaY,OAAb,EAAsB;AAClB,oBAAIO,OAAO,KAAKpB,KAAL,CAAWa,QAAQZ,CAAR,CAAX,CAAX;;AAEA,oBAAGmB,KAAKC,MAAL,GAAc,CAAjB,EAAoB;AAChBF,mCAAeG,IAAf,CAAoBF,IAApB;AACH;AACJ;;AAED,mBAAOD,eAAeV,MAAMC,OAAO,CAAP,EAAUS,eAAeR,MAAzB,CAAN,CAAf,CAAP;AACH;;;;;;AAGL,IAAIY,QAAQ,IAAIxB,WAAJ,EAAZ;;AAEAyB,QAAQC,GAAR,CAAYF,KAAZ","file":"NodeManager.js","sourcesContent":["class NodeManager {\n    constructor() {\n        this.nodes = {};\n\n        for(var i in rawNodes) {\n            var rawNode = rawNodes[i];\n\n            if(rawNode.isCity) {\n                this.nodes[rawNode.id] = new City(rawNode)\n            } else {\n                this.nodes[rawNode.id] = new Node(rawNode)\n            }\n\n        }\n    }\n\n    getRandomNode() {\n        return this.nodes[nodeIDs[floor(random(0, nodeIDs.length))]]\n    }\n\n    getRandomTown() {\n        return this.nodes[cityIDsWithoutStuttgart[floor(random(0, cityIDsWithoutStuttgart.length))]]\n    }\n\n    getRandomCity() {\n        return this.nodes[cityIDs[floor(random(0, cityIDs.length))]]\n    }\n\n    forAll(func) {\n        for(var nodeIndex in this.nodes) {\n            func(nodeIndex, this.nodes[nodeIndex])\n        }\n    }\n\n    getById(id) {\n        return this.nodes[id]\n    }\n\n    getByName(name) {\n        return this.nodes[cityDict[name]]\n    }\n\n    getStuttgart() {\n        return this.getByName('Stuttgart')\n    }\n\n    getTownThatNeedsCharging() {\n        var potentialTowns = [];\n\n        for(var i in cityIDs) {\n            var node = this.nodes[cityIDs[i]]\n\n            if(node.charge < 1) {\n                potentialTowns.push(node);\n            }\n        }\n\n        return potentialTowns[floor(random(0, potentialTowns.length))]\n    }\n}\n\nvar Nodes = new NodeManager();\n\nconsole.log(Nodes)\n"]}