{"version":3,"sources":["modules/Vehicle.js"],"names":["Vehicle","_classCallCheck","this","inCity","isDriving","isStuck","moveStack","position","createVector","velocity","capacity","charge","detour","isSlacker","getRandomNode","graph","findShortestPath","location","id","concat","target","node","done","whenTargetIsReached","fancyPath","fastestPath","toNextNode","set","next","Nodes","getById","shift","diff","x","y","distance","div","stop","isCity","type","dist","add","dischargeSpeed","environment","Events","trigger","reachedNode","city","parkedCars","push","updateAverageCharge","getChargePercentage","splice","indexOf","render","fill","scale"],"mappings":"6XAAMA,mBACF,SAAAA,IAAcC,gBAAAC,KAAAF,GACVE,KAAKC,QAAS,EACdD,KAAKE,WAAY,EACjBF,KAAKG,SAAU,EACfH,KAAKI,aALPN,KAMOO,SAAWC,aAAa,EAAG,GALpCN,KAAAO,SAAcD,aAAA,EAAA,GAAAN,KAAAQ,SAAA,EAQVR,KAAKS,OAAS,EAPdT,KAAKC,eAAL,KACAD,KAAKE,WAAY,qEAIjB,OAAKK,KAAAA,OAAWD,KAAAA,6CAIhB,IAAAI,EAAKC,MAAYC,gBAUjB,OAAOC,MAAMC,iBACTd,KAAKe,SAASC,GACdN,EAAOM,IACTC,OATFJ,MAAAC,iBACHJ,EAAAM,GAWWhB,KAAKkB,OAAOF,2CAGvB,OAAAH,MAAAC,iBAIOd,KAAKe,SAASC,GACdhB,KAAKkB,OAAOF,oCAIZG,EAAMC,GACVpB,KAAKqB,oBAAsBD,EAA3BpB,KAAAe,SAAKM,IAAAA,EAALL,IAGIhB,KAAKkB,OAASC,EAAdnB,KAAAW,UACAX,KAAAI,UAAAJ,KAAAsB,YAEItB,KAAAI,UAAKA,KAAYmB,cAEjBvB,KAAAE,WAAKE,EACRJ,KAAAC,QAAA,EACDD,KAAAwB,cACAJ,GACAA,mCAOJpB,KAAKE,WAAY,EACjBF,KAAKO,SAASkB,IAAI,EAAG,GAClBzB,KAAK0B,OAFR1B,KAAKE,SAALF,KAAiB0B,2CAUjB,GALH1B,KAAA0B,KAAAC,MAAAC,QAAA5B,KAAAI,UAAAyB,SAKM7B,KAAK0B,OAAS1B,KAAKG,QAAS,CAC3B,IAAI2B,EAAOxB,aAAaN,KAJnB0B,KAAAK,EAAA/B,KAAAK,SAAA0B,EAAA/B,KAAA0B,KAAAM,EAAAhC,KAAAK,SAAA2B,GACTC,EAAYN,KAAMC,KAANvB,SAAmBD,EAAAA,KAAUyB,SAAzCG,EAAAhC,KAAA0B,KAAAK,EAAA/B,KAAA0B,KAAAM,GAEAhC,KAAGO,SAAAuB,EAAcI,IAAc,EAAT/B,QAElBH,KAAAmC,OAKAnC,KAAKC,QAAS,EAHdD,KAAAe,SAAKR,KAAWuB,OAJpB9B,KAKOkB,OAAAkB,QAAA,OAAApC,KAAAqC,MACHrC,KAAKmC,YAALnC,KAAAkB,QAEAlB,KAAAqB,qBACArB,KAAGqB,4DAYP,OANCiB,KAAAtC,KAAAK,SAAA0B,EAAA/B,KAAAK,SAAA2B,EAAAhC,KAAA0B,KAAAK,EAAA/B,KAAA0B,KAAAM,IAMkB,2CAIhBhC,KAAKG,UAIRH,KAAKK,SAASkC,IAAIvC,KAAKO,UAJvBP,KAAGE,WAEF,OAAAF,KAAAqC,OAOOrC,KAAKS,QAAUT,KAAKwC,eAL5BC,YAAcF,WAAShC,gBAAvBP,KAAAwC,gBASOxC,KAAKS,QAAU,IALlBT,KAAGS,OAAA,EACCT,KAAAe,SAAAf,KAAe0B,KACfe,KAAAA,SAAAA,EACHC,OAAAC,QAAA,WAAA3C,OAGGA,KAAA4C,eACA5C,KAAAwB,cAGHxB,KAAAmC,4CAIAU,GACJA,EAjBDC,WAiBOC,KAAA/C,MACH6C,EAAAG,oBAAAhD,KAAAiD,uBACHjD,KAAAC,QAAA,mCASI4C,GACLA,EAAKC,WAAWI,OAAOL,EAPfA,WAAMM,QAAAnD,MAAA,GACd6C,EAAAA,qBAAqB7C,KAArBiD,uBACAJ,KAAAA,QAAKG,sCAWLhD,KAAKoD,OAAS,WACVC,KAAK,WAPTR,KACAA,KAAKG,SAAAA,EAAAA,YAA0BC,MAC/BjD,KAAKC,SAAS+B,EAAdS,YAAAa,MACH,GASW","file":"Vehicle.js","sourcesContent":["class Vehicle {\n    constructor() {\n        this.inCity = true;\n        this.isDriving = false;\n        this.isStuck = false;\n        this.moveStack = [];\n        this.position = createVector(0, 0);\n        this.velocity = createVector(0, 0);\n        this.capacity = 1\n        this.charge = 1;\n        this.dischargeSpeed = 0.009//0.012\n        this.isSlacker = false\n    }\n\n    getChargePercentage() {\n        return this.charge / this.capacity\n    }\n\n    fancyPath() {\n        var detour = Nodes.getRandomNode()\n\n        return graph.findShortestPath(\n            this.location.id,\n            detour.id\n        ).concat(\n            graph.findShortestPath(\n                detour.id,\n                this.target.id\n            )\n        )\n    }\n\n    fastestPath() {\n        return graph.findShortestPath(\n            this.location.id,\n            this.target.id\n        )\n    }\n\n    driveTo(node, done) {\n        this.whenTargetIsReached = done\n\n        if(this.location.id != node.id) {\n            this.target = node;\n            // console.log(this, 'is driving from', cityDict[this.location.id], 'to', cityDict[this.target.id])\n            if(this.isSlacker) {\n                this.moveStack = this.fancyPath()\n            } else {\n                this.moveStack = this.fastestPath()\n            }\n            this.isDriving = true;\n            this.inCity = false;\n            this.toNextNode()\n        } else if(done) {\n            done()\n        }\n    }\n\n    stop() {\n        this.isDriving = false\n        this.velocity.set(0, 0)\n        if(this.next) {\n            this.location = this.next\n        }\n    }\n\n    toNextNode() {\n        this.next = Nodes.getById(this.moveStack.shift());\n\n        if(this.next && !this.isStuck) {\n            var diff = createVector(this.next.x - this.position.x, this.next.y - this.position.y)\n            var distance = dist(this.position.x, this.position.y, this.next.x, this.next.y);\n\n            this.velocity = diff.div(distance * 2)\n        } else {\n            this.stop()\n            this.inCity = true;\n            this.location = this.target;\n            if(this.target.isCity && this.type == 'car') {\n                this.enteredCity(this.target)\n            }\n            if(this.whenTargetIsReached) {\n                this.whenTargetIsReached();\n            }\n        }\n    }\n\n    reachedNode() {\n        var distance = dist(this.position.x, this.position.y, this.next.x, this.next.y);\n\n        return distance <= 1\n    }\n\n    updatePosition() {\n        if(this.isStuck) {\n            return\n        }\n\n        this.position.add(this.velocity)\n\n        if(this.isDriving) {\n\n            if(this.type == 'car') {\n                this.charge -= this.dischargeSpeed\n                environment.simulation.totalCarCharge -= this.dischargeSpeed\n            }\n\n            if(this.charge <= 0) {\n                this.charge = 0\n                this.location = this.next\n                this.isStuck = true\n                Events.trigger('carStuck', this)\n            }\n\n            if(this.reachedNode()) {\n                this.toNextNode()\n            }\n        } else {\n            this.stop()\n        }\n    }\n\n    enteredCity(city) {\n        city.parkedCars.push(this)\n        city.updateAverageCharge(this.getChargePercentage())\n        this.inCity = true\n    }\n\n    leftCity(city) {\n        city.parkedCars.splice(city.parkedCars.indexOf(this), 1)\n        city.updateAverageCharge(-this.getChargePercentage())\n        this.inCity = false\n    }\n\n    highlight() {\n        this.render = function() {\n            fill('#FF0000')\n            rect(\n                this.position.x * environment.scale,\n                this.position.y * environment.scale,\n                50,\n                50\n            )\n        }\n    }\n}\n"]}