{"version":3,"sources":["calculations.js"],"names":["prettyTime","time","hours","Math","floor","minutes","seconds","convertTime","from","to","secs","fineRound","number","random","min","max","calculateMileagePerKilometre","mileage","calculateReach","capacity","calculateChargingCapacity","reach","distanceToLocation","calculateAmountOfCarsThatCanBeCharged","chargingCapacity","capacityOfCar","chargePercentage","calculateChargeTime","chargeSpeed","percentage","calculateTravelTime","distance","speed","calculateChargeCycleTime","chargeableCars","averageTimeBetweenCharges","chargeTime","calculateAverageChargeTime","chargeCycleTime","calculateChargeableCarsInTimeframe","averageChargeTime","availableTime","calculateTrucksNeededForCoverage","chargeableCarsInTimeframe","coverageRequirement"],"mappings":"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","file":"calculations.js","sourcesContent":["// Haushaltssteckdose: 2.3 kW\n// Ladestationen: 3.7 kW, 11 kW, 22 kW\n\n// var config = {\n//     emotion: {\n//         capacity: 400, // kWh\n//         chargeSpeed: 120, // kWh\n//         mileage: 22, // kWh per 100 KM\n//         averageSpeed: 40 // km/h\n//     },\n//     car: {\n//         capacity: 24, // kWh\n//         chargeSpeed: 22, // kWh\n//         mileage: 15 // kWh per 100 KM\n//     },\n\n//     // Static\n//     // averageDistanceBetweenCharges: 800, // M\n//     // averageDistanceToLocation:  25, // KM\n//     // averageTruckUptime: 7, // Hours\n//     // averageCarsToChargePerDay: 1000, // Amount of cars\n//     // chargePercentage: 0.25, //decimal percentage (0.8 as 80%)\n//     // deployedTrucks: 25, // Amount of trucks\n\n//     // Random\n//     averageDistanceBetweenCharges: random(500, 2000), // M\n//     averageDistanceToLocation:  random(20, 40), // KM\n//     averageTruckUptime: random(3, 8), // Hours\n//     averageCarsToChargePerDay: random(250, 3000), // Amount of cars\n//     chargePercentage: 0.25, //decimal percentage (0.8 as 80%)\n//     deployedTrucks: random(5, 50), // Amount of trucks\n// }\n\n\n// Helper functions\nfunction prettyTime(time) {\n    var hours   = Math.floor(time / 3600);\n    var minutes = Math.floor((time - hours * 3600) / 60);\n    var seconds = Math.floor(time - hours * 3600 - minutes * 60);\n\n    if(hours < 10) { hours = '0' + hours; }\n    if(minutes < 10) { minutes = '0' + minutes; }\n    if(seconds < 10) { seconds = '0' + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds;\n}\n\nfunction convertTime(time, from, to) {\n    var secs = time;\n\n    if(from == 'i') { secs = time * 60 }\n    if(from == 'h') { secs = time * 60 * 60 }\n    if(from == 'd') { secs = time * 60 * 60 * 24 }\n    if(from == 'w') { secs = time * 60 * 60 * 24 * 7 }\n    if(from == 'm') { secs = time * 60 * 60 * 24 * 30.4375 }\n    if(from == 'y') { secs = time * 60 * 60 * 24 * 365.25 }\n\n    if(to == 's') { return secs }\n    if(to == 'i') { return secs / 60 }\n    if(to == 'h') { return secs / 60 / 60 }\n    if(to == 'd') { return secs / 60 / 60 / 24 }\n    if(to == 'w') { return secs / 60 / 60 / 24 / 7 }\n    if(to == 'm') { return secs / 60 / 60 / 24 / 30.4375 }\n    if(to == 'y') { return secs / 60 / 60 / 24 / 365.25 }\n\n    return false;\n}\n\nfunction fineRound(number) {\n    return Math.floor(number * 10) / 10\n}\n\nfunction random(min, max) {\n    return Math.floor(Math.random() * max) + min\n}\n\n\n// Calculate the mileage per KM\n// mileage in kWh per 100 KM\n// returns kWh per KM\nfunction calculateMileagePerKilometre(mileage) {\n    return mileage / 100\n}\n\n// Calculate distance in KM something can travel without recharging\n// capacity in kWh\n// mileage in kWh per 100 KM\n// returns KM\nfunction calculateReach(capacity, mileage) {\n    return capacity / mileage * 100\n}\n\n// Calculate the capacity remaining after travel time\n// reach in KM is the result of calculateReach()\n// mileage in kWh per 100 KM\n// distanceToLocation in KM\n// returns KM\nfunction calculateChargingCapacity(reach, mileage, distanceToLocation) {\n    return reach - calculateMileagePerKilometre(mileage) * distanceToLocation * 2\n}\n\n// Calculate the amount of cars that can be charged by one truck\n// chargingCapacity in KM is the result of calculateChargingCapacity()\n// capacityOfCar in KM is the result of calculateReach()\n// returns amount of cars a truck can charge\nfunction calculateAmountOfCarsThatCanBeCharged(chargingCapacity, capacityOfCar, chargePercentage) {\n    return chargingCapacity / (capacityOfCar * chargePercentage)\n}\n\n// Calculate the time it takes for something to charge\n// capacity in kWh\n// chargeSpeed in kWH\n// percentage in decimal percentage (0.8 as 80%)\n// returns seconds\nfunction calculateChargeTime(capacity, chargeSpeed, percentage) {\n    return capacity / chargeSpeed * percentage * 3600\n}\n\n// Calculate the time it takes to travel a specified distance\n// distance in m\n// speed in m/h\n// returns seconds\nfunction calculateTravelTime(distance, speed) {\n    return distance * 3600 / (speed * 1000)\n}\n\n// Calculate how long it takes for a truck to do a charge cycle\n// asuming there's no downtime and always a demand\n// chargeableCars in amount is the result of calculateAmountOfCarsThatCanBeCharged()\n// averageTimeBetweenCharges in seconds is the result of calculateTravelTime()\n// chargeTime in hours is the result of calculateChargeTime()\n// returns seconds\nfunction calculateChargeCycleTime(chargeableCars, averageTimeBetweenCharges, chargeTime) {\n    return chargeableCars * chargeTime + chargeableCars * averageTimeBetweenCharges\n}\n\n// Calculate how long it takes on average for a single car to get charged\n// chargeableCars in amount is the result of calculateAmountOfCarsThatCanBeCharged()\n// chargeCycleTime in seconds is the result of calculateChargeCycleTime()\n// returns seconds\nfunction calculateAverageChargeTime(chargeableCars, chargeCycleTime) {\n    return chargeCycleTime / chargeableCars\n}\n\n// Caclulate how many cars a truck can charge per day\n// averageChargeTime in seconds is the result of calculateAverageChargeTime()\n// availableTime in seconds\n// returns amount of cars charged per day\nfunction calculateChargeableCarsInTimeframe(averageChargeTime, availableTime) {\n    return Math.floor(availableTime / averageChargeTime * 10) / 10\n}\n\n// Calculate how many trucks are needed to charge a specified amount of cars in a given timeframe\n// chargeableCarsInTimeframe in amount is the result of calculateChargeableCarsInTimeframe()\n// coverageRequirement in amount of cars that need to be charged\n// returns amount of trucks needed to charge the cars\nfunction calculateTrucksNeededForCoverage(chargeableCarsInTimeframe, coverageRequirement) {\n    return coverageRequirement / chargeableCarsInTimeframe\n}\n\n\n// Test output\n// var chargingCapacity = calculateChargingCapacity(config.emotion.capacity, config.emotion.mileage, config.averageDistanceToLocation)\n\n// var amountOfCarsThatCanBeCharged = calculateAmountOfCarsThatCanBeCharged(chargingCapacity, config.car.capacity);\n// var travelTime = calculateTravelTime(config.averageDistanceBetweenCharges, config.emotion.averageSpeed);\n// var chargeTime = calculateChargeTime(config.car.capacity, config.car.chargeSpeed, config.chargePercentage);\n\n// var chargeCycleTime = calculateChargeCycleTime(amountOfCarsThatCanBeCharged, travelTime, chargeTime) + calculateTravelTime(config.averageDistanceToLocation, config.emotion.averageSpeed) * 1000\n\n// var averageChargeTime = calculateAverageChargeTime(amountOfCarsThatCanBeCharged, chargeCycleTime);\n\n// var carsChargedPerTruck = calculateChargeableCarsInTimeframe(averageChargeTime, convertTime(config.averageTruckUptime, 'h', 's'));\n// var carsChargedPerDay = Math.floor(carsChargedPerTruck * config.deployedTrucks);\n// var carsChargedPerMonth = Math.floor(carsChargedPerDay * 30.4);\n// var carsChargedPerYear = Math.floor(carsChargedPerDay * 365.25);\n\n// console.log();\n\n// prettyPrintConfig();\n\n// console.log();\n\n// console.log('RAW VALUES')\n\n// console.log('chargingCapacity', chargingCapacity, 'kWh');\n// console.log('amountOfCarsThatCanBeCharged', amountOfCarsThatCanBeCharged);\n// console.log('travelTime', prettyTime(travelTime), travelTime);\n// console.log('chargeTime', prettyTime(chargeTime), chargeTime);\n// console.log('chargeCycleTime', prettyTime(chargeCycleTime), chargeCycleTime);\n// console.log('averageChargeTime', prettyTime(averageChargeTime), averageChargeTime);\n// console.log('carsChargedPerTruck', carsChargedPerTruck, carsChargedPerTruck);\n\n// console.log()\n\n// console.log('RESULTS')\n\n// console.log('Charging each car by', config.chargePercentage * 100, '% allows them to travel', fineRound(calculateReach(config.car.capacity * config.chargePercentage, config.car.mileage)), 'KM')\n// console.log('On average a truck takes', prettyTime(chargeCycleTime), 'to charge', fineRound(amountOfCarsThatCanBeCharged), 'cars until it needs to recharge')\n// console.log('In', config.averageTruckUptime, 'hours a truck can charge', carsChargedPerTruck, 'cars by', config.chargePercentage * 100, '%');\n// console.log('All', config.deployedTrucks, 'trucks can charge', carsChargedPerDay, 'cars per day');\n// console.log('That\\'s', fineRound(carsChargedPerMonth / config.deployedTrucks), 'cars per month, or', fineRound(carsChargedPerYear / config.deployedTrucks), 'cars per year which a single truck can charge')\n// console.log('Or in total for', config.deployedTrucks, 'trucks,', carsChargedPerMonth, 'cars per month, or', carsChargedPerYear, 'cars per year');\n// console.log('In order to charge', config.averageCarsToChargePerDay, 'cars in', config.averageTruckUptime, 'hours it would require', Math.ceil(calculateTrucksNeededForCoverage(carsChargedPerTruck, config.averageCarsToChargePerDay)), 'trucks')\n\n// console.log();\n"]}