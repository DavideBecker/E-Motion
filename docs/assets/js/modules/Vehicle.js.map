{"version":3,"sources":["modules/Vehicle.js"],"names":["Vehicle","inCity","isDriving","isStuck","moveStack","position","createVector","velocity","capacity","charge","dischargeSpeed","isSlacker","detour","Nodes","getRandomNode","graph","findShortestPath","location","id","concat","target","node","done","whenTargetIsReached","fancyPath","fastestPath","toNextNode","set","next","getById","shift","diff","x","y","distance","dist","div","stop","isCity","type","enteredCity","add","Events","trigger","reachedNode","city","parkedCars","push","updateAverageCharge","getChargePercentage","splice","indexOf","render","fill","rect","environment","scale"],"mappings":"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","file":"Vehicle.js","sourcesContent":["class Vehicle {\n    constructor() {\n        this.inCity = true;\n        this.isDriving = false;\n        this.isStuck = false;\n        this.moveStack = [];\n        this.position = createVector(0, 0);\n        this.velocity = createVector(0, 0);\n        this.capacity = 1\n        this.charge = 1;\n        this.dischargeSpeed = 0.012\n        this.isSlacker = false\n    }\n\n    getChargePercentage() {\n        return this.charge / this.capacity\n    }\n\n    fancyPath() {\n        var detour = Nodes.getRandomNode()\n\n        return graph.findShortestPath(\n            this.location.id,\n            detour.id\n        ).concat(\n            graph.findShortestPath(\n                detour.id,\n                this.target.id\n            )\n        )\n    }\n\n    fastestPath() {\n        return graph.findShortestPath(\n            this.location.id,\n            this.target.id\n        )\n    }\n\n    driveTo(node, done) {\n        this.whenTargetIsReached = done\n\n        if(this.location.id != node.id) {\n            this.target = node;\n            // console.log(this, 'is driving from', cityDict[this.location.id], 'to', cityDict[this.target.id])\n            if(this.isSlacker) {\n                this.moveStack = this.fancyPath()\n            } else {\n                this.moveStack = this.fastestPath()\n            }\n            this.isDriving = true;\n            this.inCity = false;\n            this.toNextNode()\n        } else if(done) {\n            done()\n        }\n    }\n\n    stop() {\n        this.isDriving = false\n        this.velocity.set(0, 0)\n        if(this.next) {\n            this.location = this.next\n        }\n    }\n\n    toNextNode() {\n        this.next = Nodes.getById(this.moveStack.shift());\n\n        if(this.next && !this.isStuck) {\n            var diff = createVector(this.next.x - this.position.x, this.next.y - this.position.y)\n            var distance = dist(this.position.x, this.position.y, this.next.x, this.next.y);\n\n            this.velocity = diff.div(distance * 2)\n        } else {\n            this.stop()\n            this.inCity = true;\n            this.location = this.target;\n            if(this.target.isCity && this.type == 'car') {\n                this.enteredCity(this.target)\n            }\n            if(this.whenTargetIsReached) {\n                this.whenTargetIsReached();\n            }\n        }\n    }\n\n    reachedNode() {\n        var distance = dist(this.position.x, this.position.y, this.next.x, this.next.y);\n\n        return distance <= 1\n    }\n\n    updatePosition() {\n        if(this.isStuck) {\n            return\n        }\n\n        this.position.add(this.velocity)\n\n        if(this.isDriving) {\n\n            this.charge -= this.dischargeSpeed\n\n            if(this.charge <= 0) {\n                this.charge = 0\n                this.location = this.next\n                this.isStuck = true\n                Events.trigger('carStuck', this)\n            }\n\n            if(this.reachedNode()) {\n                this.toNextNode()\n            }\n        } else {\n            this.stop()\n        }\n    }\n\n    enteredCity(city) {\n        city.parkedCars.push(this)\n        city.updateAverageCharge(this.getChargePercentage())\n        this.inCity = true\n    }\n\n    leftCity(city) {\n        city.parkedCars.splice(city.parkedCars.indexOf(this), 1)\n        city.updateAverageCharge(-this.getChargePercentage())\n        this.inCity = false\n    }\n\n    highlight() {\n        this.render = function() {\n            fill('#FF0000')\n            rect(\n                this.position.x * environment.scale,\n                this.position.y * environment.scale,\n                50,\n                50\n            )\n        }\n    }\n}\n"]}