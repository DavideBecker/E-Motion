{"version":3,"sources":["modules/NodeManager.js"],"names":["NodeManager","_classCallCheck","this","nodes","i","rawNodes","rawNode","isCity","id","City","Node","nodeIDs","floor","random","length","cityIDsWithoutStuttgart","cityIDs","func","nodeIndex","name","cityDict","getByName","potentialTowns","node","charge","Nodes","console","log"],"mappings":"6XAAMA,uBACF,SAAAA,IAAcC,gBAAAC,KAAAF,GACVE,KAAKC,SAEL,IAAI,IAAIC,KAAKC,SAAU,CACnB,IAAIC,EAAUD,SAASD,GAJ/BE,EAAAC,OAAcL,KAAAC,MAAAG,EAAAE,IAAA,IAAAC,KAAAH,GACLH,KAAQA,MAAbG,EAAAE,IAAA,IAAAE,KAAAJ,iEAOK,OAFDJ,KAEOC,MAAAQ,QAAAC,MAAAC,OAAA,EAAAF,QAAAG,mDAKd,OAAAZ,KAAAC,MAAAY,wBAAAH,MAAAC,OAAA,EAAAE,wBAAAD,mDAWG,OAAOZ,KAAKC,MAAMa,QAAQJ,MATdC,OAAA,EAAAG,QAAAF,0CAYTG,GACH,IAAI,IAAIC,KAAahB,KAAKC,MACtBc,EAAKC,EAAWhB,KAAKC,MAAMe,oCAI3BV,GACJ,OAAON,KAAKC,MAAMK,qCAGZW,GACN,OAAOjB,KAAKC,MAAMiB,SAASD,2CAR1B,OAAAjB,KAAAmB,UAAA,gEAgBD,IAAIC,KAXP,IAAA,IAAAlB,KAAAY,QAAA,CAcO,IAAIO,EAAOrB,KAAKC,MAAMa,QAAQZ,IAE3BmB,EAAKC,OAAS,GAbrBF,EAAkBF,KAAAA,GAkBlB,OAAOE,EAAeV,MAAMC,OAfjB,EAAAS,EAAAR,mBAmBfW,MAAQ,IAAIzB,YAdR0B,QAAAC,IAAAF","file":"NodeManager.js","sourcesContent":["class NodeManager {\n    constructor() {\n        this.nodes = {};\n\n        for(var i in rawNodes) {\n            var rawNode = rawNodes[i];\n\n            if(rawNode.isCity) {\n                this.nodes[rawNode.id] = new City(rawNode)\n            } else {\n                this.nodes[rawNode.id] = new Node(rawNode)\n            }\n\n        }\n    }\n\n    getRandomNode() {\n        return this.nodes[nodeIDs[floor(random(0, nodeIDs.length))]]\n    }\n\n    getRandomTown() {\n        return this.nodes[cityIDsWithoutStuttgart[floor(random(0, cityIDsWithoutStuttgart.length))]]\n    }\n\n    getRandomCity() {\n        return this.nodes[cityIDs[floor(random(0, cityIDs.length))]]\n    }\n\n    forAll(func) {\n        for(var nodeIndex in this.nodes) {\n            func(nodeIndex, this.nodes[nodeIndex])\n        }\n    }\n\n    getById(id) {\n        return this.nodes[id]\n    }\n\n    getByName(name) {\n        return this.nodes[cityDict[name]]\n    }\n\n    getStuttgart() {\n        return this.getByName('Stuttgart')\n    }\n\n    getTownThatNeedsCharging() {\n        var potentialTowns = [];\n\n        for(var i in cityIDs) {\n            var node = this.nodes[cityIDs[i]]\n\n            if(node.charge < 1) {\n                potentialTowns.push(node);\n            }\n        }\n\n        return potentialTowns[floor(random(0, potentialTowns.length))]\n    }\n}\n\nvar Nodes = new NodeManager();\n\nconsole.log(Nodes)\n"]}