{"version":3,"sources":["calculations.js"],"names":["prettyTime","time","hours","Math","floor","minutes","seconds","convertTime","from","to","secs","number","random","min","max","mileage","calculateReach","capacity","calculateChargingCapacity","reach","distanceToLocation","calculateMileagePerKilometre","calculateAmountOfCarsThatCanBeCharged","chargingCapacity","capacityOfCar","chargePercentage","calculateChargeTime","chargeSpeed","percentage","calculateTravelTime","distance","speed","calculateChargeCycleTime","chargeableCars","averageTimeBetweenCharges","chargeTime","calculateAverageChargeTime","chargeCycleTime","calculateChargeableCarsInTimeframe","availableTime","averageChargeTime","calculateTrucksNeededForCoverage","chargeableCarsInTimeframe","coverageRequirement"],"mappings":"aAmCA,SAASA,WAAWC,GADpB,IAAAC,EAAAC,KAAAC,MAAAH,EAAA,MACAI,EAASL,KAAWC,OAAMA,EAAA,KAAAC,GAAA,IAClBA,EAAUC,KAAKC,MAAMH,EAAzB,KAAgCC,EAAhC,GAAAG,GAIuC,OAFvCH,EAAII,KAAUH,EAAWF,IAAAA,GAGtBI,EAAU,KAAMA,EAAU,IAAMA,GADnCC,EAAW,KAAIA,EAAA,IAAAA,GAAwBJ,EAAA,IAAAG,EAAA,IAAAC,EACM,SAAAC,YAAAN,EAAAO,EAAAC,GAC7C,IAAGH,EAAAA,EAeH,MAf6C,KAAAE,IAAAE,EAAA,GAAAT,GASlC,KAARO,IAAeE,EAAc,GAAPT,EAAY,IAP9BC,KAAPM,IAAOE,EAAwB,GAAVL,EAAgBC,GAAAA,IACxC,KAAAE,IAAAE,EAAA,GAAAT,EAAA,GAAA,GAAA,GASc,KAARO,IAAeE,EAAc,GAAPT,EAAY,GAAK,GAAK,SAP1CM,KAATC,IAAqBP,EAArB,GAA2BO,EAAU,GAAA,GAAA,QAUxB,KAANC,EAAoBC,EAPpBF,KAAHC,EAAgBC,EAAA,GAAEA,KAAAA,EAAAA,EAAA,GAAA,GAAkB,KAAAD,EAAAC,EAAA,GAAA,GAAA,GACjCF,KAAHC,EAAgBC,EAAA,GAAA,GAAA,GAAA,EAAEA,KAAAA,EAAmBA,EAAnB,GAAA,GAAA,GAAA,QAAuB,KAAAD,GAAAC,EAAA,GAAA,GAAA,GAAA,OAEvBA,SAAAA,UAAOT,GAAyB,OAAAE,KAAAC,MAAA,GAAAO,GAAA,GACM,SAAAC,OAAAC,EAAAC,GACxD,OAAGN,KAAQJ,MAAKD,KAAAS,SAAAE,GAAAD,EAGhB,SAAGJ,6BAAWM,GAAE,OAAAA,EAAOL,IAEqB,SAAAM,eAAAC,EAAAF,GAC5C,OAAGN,EAAWM,EAAA,IAEuC,SAAAG,0BAAAC,EAAAJ,EAAAK,GAmCrD,OAAOD,EAAQE,6BAA6BN,GAAWK,EAAqB,EAOhF,SAASE,sCAAsCC,EAAkBC,EAAeC,GAjChF,OAASb,GAAiBY,EAAAC,GAStB,SAAAC,oBAAAT,EAAAU,EAAAC,GACH,OAAAX,EAAAU,EAAAC,EAAA,KAOG,SAAAC,oBAAOC,EAAPC,GACH,OAAA,KAAAD,GAAA,IAAAC,GASA,SAAAC,yBAAAC,EAAAC,EAAAC,GAkCG,OAAOF,EAAiBE,EAAaF,EAAiBC,EA1BzD,SAAAE,2BAAAH,EAAAI,GAkCG,OAAOA,EAAkBJ,EA1BzB,SAAAK,mCAAgCV,EAAhCW,GACH,OAAApC,KAAAC,MAAAmC,EAAAC,EAAA,IAAA,GAOG,SAAAC,iCAAOC,EAAPC,GACH,OAAAA,EAAAD","file":"calculations.js","sourcesContent":["// Haushaltssteckdose: 2.3 kW\n// Ladestationen: 3.7 kW, 11 kW, 22 kW\n\n// var config = {\n//     emotion: {\n//         capacity: 400, // kWh\n//         chargeSpeed: 120, // kWh\n//         mileage: 22, // kWh per 100 KM\n//         averageSpeed: 40 // km/h\n//     },\n//     car: {\n//         capacity: 24, // kWh\n//         chargeSpeed: 22, // kWh\n//         mileage: 15 // kWh per 100 KM\n//     },\n\n//     // Static\n//     // averageDistanceBetweenCharges: 800, // M\n//     // averageDistanceToLocation:  25, // KM\n//     // averageTruckUptime: 7, // Hours\n//     // averageCarsToChargePerDay: 1000, // Amount of cars\n//     // chargePercentage: 0.25, //decimal percentage (0.8 as 80%)\n//     // deployedTrucks: 25, // Amount of trucks\n\n//     // Random\n//     averageDistanceBetweenCharges: random(500, 2000), // M\n//     averageDistanceToLocation:  random(20, 40), // KM\n//     averageTruckUptime: random(3, 8), // Hours\n//     averageCarsToChargePerDay: random(250, 3000), // Amount of cars\n//     chargePercentage: 0.25, //decimal percentage (0.8 as 80%)\n//     deployedTrucks: random(5, 50), // Amount of trucks\n// }\n\n\n// Helper functions\nfunction prettyTime(time) {\n    var hours   = Math.floor(time / 3600);\n    var minutes = Math.floor((time - hours * 3600) / 60);\n    var seconds = Math.floor(time - hours * 3600 - minutes * 60);\n\n    if(hours < 10) { hours = '0' + hours; }\n    if(minutes < 10) { minutes = '0' + minutes; }\n    if(seconds < 10) { seconds = '0' + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds;\n}\n\nfunction convertTime(time, from, to) {\n    var secs = time;\n\n    if(from == 'i') { secs = time * 60 }\n    if(from == 'h') { secs = time * 60 * 60 }\n    if(from == 'd') { secs = time * 60 * 60 * 24 }\n    if(from == 'w') { secs = time * 60 * 60 * 24 * 7 }\n    if(from == 'm') { secs = time * 60 * 60 * 24 * 30.4375 }\n    if(from == 'y') { secs = time * 60 * 60 * 24 * 365.25 }\n\n    if(to == 's') { return secs }\n    if(to == 'i') { return secs / 60 }\n    if(to == 'h') { return secs / 60 / 60 }\n    if(to == 'd') { return secs / 60 / 60 / 24 }\n    if(to == 'w') { return secs / 60 / 60 / 24 / 7 }\n    if(to == 'm') { return secs / 60 / 60 / 24 / 30.4375 }\n    if(to == 'y') { return secs / 60 / 60 / 24 / 365.25 }\n\n    return false;\n}\n\nfunction fineRound(number) {\n    return Math.floor(number * 10) / 10\n}\n\nfunction random(min, max) {\n    return Math.floor(Math.random() * max) + min\n}\n\n\n// Calculate the mileage per KM\n// mileage in kWh per 100 KM\n// returns kWh per KM\nfunction calculateMileagePerKilometre(mileage) {\n    return mileage / 100\n}\n\n// Calculate distance in KM something can travel without recharging\n// capacity in kWh\n// mileage in kWh per 100 KM\n// returns KM\nfunction calculateReach(capacity, mileage) {\n    return capacity / mileage * 100\n}\n\n// Calculate the capacity remaining after travel time\n// reach in KM is the result of calculateReach()\n// mileage in kWh per 100 KM\n// distanceToLocation in KM\n// returns KM\nfunction calculateChargingCapacity(reach, mileage, distanceToLocation) {\n    return reach - calculateMileagePerKilometre(mileage) * distanceToLocation * 2\n}\n\n// Calculate the amount of cars that can be charged by one truck\n// chargingCapacity in KM is the result of calculateChargingCapacity()\n// capacityOfCar in KM is the result of calculateReach()\n// returns amount of cars a truck can charge\nfunction calculateAmountOfCarsThatCanBeCharged(chargingCapacity, capacityOfCar, chargePercentage) {\n    return chargingCapacity / (capacityOfCar * chargePercentage)\n}\n\n// Calculate the time it takes for something to charge\n// capacity in kWh\n// chargeSpeed in kWH\n// percentage in decimal percentage (0.8 as 80%)\n// returns seconds\nfunction calculateChargeTime(capacity, chargeSpeed, percentage) {\n    return capacity / chargeSpeed * percentage * 3600\n}\n\n// Calculate the time it takes to travel a specified distance\n// distance in m\n// speed in m/h\n// returns seconds\nfunction calculateTravelTime(distance, speed) {\n    return distance * 3600 / (speed * 1000)\n}\n\n// Calculate how long it takes for a truck to do a charge cycle\n// asuming there's no downtime and always a demand\n// chargeableCars in amount is the result of calculateAmountOfCarsThatCanBeCharged()\n// averageTimeBetweenCharges in seconds is the result of calculateTravelTime()\n// chargeTime in hours is the result of calculateChargeTime()\n// returns seconds\nfunction calculateChargeCycleTime(chargeableCars, averageTimeBetweenCharges, chargeTime) {\n    return chargeableCars * chargeTime + chargeableCars * averageTimeBetweenCharges\n}\n\n// Calculate how long it takes on average for a single car to get charged\n// chargeableCars in amount is the result of calculateAmountOfCarsThatCanBeCharged()\n// chargeCycleTime in seconds is the result of calculateChargeCycleTime()\n// returns seconds\nfunction calculateAverageChargeTime(chargeableCars, chargeCycleTime) {\n    return chargeCycleTime / chargeableCars\n}\n\n// Caclulate how many cars a truck can charge per day\n// averageChargeTime in seconds is the result of calculateAverageChargeTime()\n// availableTime in seconds\n// returns amount of cars charged per day\nfunction calculateChargeableCarsInTimeframe(averageChargeTime, availableTime) {\n    return Math.floor(availableTime / averageChargeTime * 10) / 10\n}\n\n// Calculate how many trucks are needed to charge a specified amount of cars in a given timeframe\n// chargeableCarsInTimeframe in amount is the result of calculateChargeableCarsInTimeframe()\n// coverageRequirement in amount of cars that need to be charged\n// returns amount of trucks needed to charge the cars\nfunction calculateTrucksNeededForCoverage(chargeableCarsInTimeframe, coverageRequirement) {\n    return coverageRequirement / chargeableCarsInTimeframe\n}\n\n\n// Test output\n// var chargingCapacity = calculateChargingCapacity(config.emotion.capacity, config.emotion.mileage, config.averageDistanceToLocation)\n\n// var amountOfCarsThatCanBeCharged = calculateAmountOfCarsThatCanBeCharged(chargingCapacity, config.car.capacity);\n// var travelTime = calculateTravelTime(config.averageDistanceBetweenCharges, config.emotion.averageSpeed);\n// var chargeTime = calculateChargeTime(config.car.capacity, config.car.chargeSpeed, config.chargePercentage);\n\n// var chargeCycleTime = calculateChargeCycleTime(amountOfCarsThatCanBeCharged, travelTime, chargeTime) + calculateTravelTime(config.averageDistanceToLocation, config.emotion.averageSpeed) * 1000\n\n// var averageChargeTime = calculateAverageChargeTime(amountOfCarsThatCanBeCharged, chargeCycleTime);\n\n// var carsChargedPerTruck = calculateChargeableCarsInTimeframe(averageChargeTime, convertTime(config.averageTruckUptime, 'h', 's'));\n// var carsChargedPerDay = Math.floor(carsChargedPerTruck * config.deployedTrucks);\n// var carsChargedPerMonth = Math.floor(carsChargedPerDay * 30.4);\n// var carsChargedPerYear = Math.floor(carsChargedPerDay * 365.25);\n\n// console.log();\n\n// prettyPrintConfig();\n\n// console.log();\n\n// console.log('RAW VALUES')\n\n// console.log('chargingCapacity', chargingCapacity, 'kWh');\n// console.log('amountOfCarsThatCanBeCharged', amountOfCarsThatCanBeCharged);\n// console.log('travelTime', prettyTime(travelTime), travelTime);\n// console.log('chargeTime', prettyTime(chargeTime), chargeTime);\n// console.log('chargeCycleTime', prettyTime(chargeCycleTime), chargeCycleTime);\n// console.log('averageChargeTime', prettyTime(averageChargeTime), averageChargeTime);\n// console.log('carsChargedPerTruck', carsChargedPerTruck, carsChargedPerTruck);\n\n// console.log()\n\n// console.log('RESULTS')\n\n// console.log('Charging each car by', config.chargePercentage * 100, '% allows them to travel', fineRound(calculateReach(config.car.capacity * config.chargePercentage, config.car.mileage)), 'KM')\n// console.log('On average a truck takes', prettyTime(chargeCycleTime), 'to charge', fineRound(amountOfCarsThatCanBeCharged), 'cars until it needs to recharge')\n// console.log('In', config.averageTruckUptime, 'hours a truck can charge', carsChargedPerTruck, 'cars by', config.chargePercentage * 100, '%');\n// console.log('All', config.deployedTrucks, 'trucks can charge', carsChargedPerDay, 'cars per day');\n// console.log('That\\'s', fineRound(carsChargedPerMonth / config.deployedTrucks), 'cars per month, or', fineRound(carsChargedPerYear / config.deployedTrucks), 'cars per year which a single truck can charge')\n// console.log('Or in total for', config.deployedTrucks, 'trucks,', carsChargedPerMonth, 'cars per month, or', carsChargedPerYear, 'cars per year');\n// console.log('In order to charge', config.averageCarsToChargePerDay, 'cars in', config.averageTruckUptime, 'hours it would require', Math.ceil(calculateTrucksNeededForCoverage(carsChargedPerTruck, config.averageCarsToChargePerDay)), 'trucks')\n\n// console.log();\n"]}