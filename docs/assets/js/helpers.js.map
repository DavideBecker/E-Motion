{"version":3,"sources":["helpers.js"],"names":["debugged","obj","push","resize","canvas","sidebarWidth","$","hasClass","width","environment","windowWidth","resizeCanvas","windowHeight","findStuckCar","stuckCars","cars","map","car","isStuck","length","hsv2rgb","hue","saturation","vibrancy","rgb","i","data","x","round","toString","slice","join","chargeToColor","charge","simulation","carChargeLimit","abs","addToQueue","thing","type","queue","pos","elem","fillQueueWithCities","cityIndex","cities","city","id","cityDict","Stuttgart","clearQueueFromCities","filter","item","248169543","58922085","249665541","157476409","124873928","78784342","98860443","151269436","13734131","90947800","216687444","7970225","199885805","Ditzingen","Leonberg","Sindelnfingen","Musberg","Steinbronn","Filderstadt","Ostfildern","Neuhausen","Esslingen","Altbach","Remseck","Kornwestheim","Korntal-Münchingen","cityIDsWithoutStuttgart","cityIDs"],"mappings":"aAoCA,SAAIA,gBAAJC,GAGID,SAASE,KAAKD,GACjB,SAAAE,OAAAC,GAGG,IAAIC,EAAeC,EAAE,QAAQC,SAAS,cAAgBD,EAAE,YAAYE,QAAU,EAA9EC,YAAIJ,MAAeC,IAAEF,EAAQG,aAAS,KAAnBH,EAAqCM,YAAFL,GAAtD,KAGAD,EAAOO,aAAaP,EAAOM,YAAcL,EAAe,IAAKD,EAAOQ,cACvE,SAAAC,eAGG,IAAIC,EAAYC,KAAKC,IAAI,SAASC,GAAO,OAAOA,EAAIC,UAApD,OAAIJ,EAAYC,MAAKC,OAAI,EAAAF,EAAcK,UAK3C,SAASC,QAAQC,EAAKC,EAAYC,GAFjC,IAAAC,EAAAC,EAKOC,KAFJ,GAAA,IAAAJ,EACIE,GAAJD,EAAAA,EAAAA,QASIG,OARAA,GAAO,GAERJ,EAAAA,KAAAA,MAAeD,GACdG,GACGD,GAAA,EAAAD,GACHD,GAAA,EAAAC,GAAAD,EAAAI,IAMIF,GAAY,EAAID,GAAc,GAAKD,EAAMI,MAFzCF,GAIJ,KAAA,EACAC,GAAAD,EAAAG,EAAA,GAAAA,EAAA,IACIF,MACA,KAAA,EACJA,GAAAE,EAAA,GAAAH,EAAAG,EAAA,IACIF,MACA,KAAA,EACJA,GAAAE,EAAA,GAAAH,EAAAG,EAAA,IACIF,MACA,KAAA,EACJA,GAAAE,EAAA,GAAAA,EAAA,GAAAH,GACIC,MACA,KAAA,EACJA,GAAAE,EAAA,GAAAA,EAAA,GAAAH,GACIC,MACA,QACJA,GAAAD,EAAAG,EAAA,GAAAA,EAAA,IAMJ,MAAO,IAAMF,EAAIR,IAAI,SAASW,GAA9B,OAAO,IAAUX,KAAIY,MAAA,IAAAD,GAAYE,SAAA,KAAAC,OAAA,KAC7BC,KAAA,IAIR,SAASC,cAAcC,GAQnB,OARJA,GAASD,EAAAA,YAATE,WAA+BC,gBACjB,IACPF,EAAS,GAMLb,QAJN,IAAAa,EACSG,IAAAH,EAAV,IAAA,GAGyB,GAG7B,SAASI,WAAWC,GAApB,GAAoBA,QAApBA,EAASD,KACFC,MAAMC,KAAND,QACCE,GAAA,OAAMtC,EAAKoC,KAAX,CADJ,IAEOG,EAAGH,MAAMC,UAAT,SAAAG,GAAA,MAAwB,OAAAA,EAAAH,OACDE,EAAA,IAA1BA,EAAAD,MAAArB,QAGIsB,MAAAA,OAAMD,EAAMrB,EAAAA,IAInB,SAAAwB,sBACJ,IAAA,IAAAC,KAAAC,OAAA,CAIO,IAAIC,EAAOD,OAAOD,GADlBE,EAAIF,iBAAqBE,EAAAC,IAAAC,SAAAC,WACrBH,OAAOD,QAAOD,oBAAlBE,IAKH,SAAAI,uBACJV,MAAAA,MAAAW,OAAA,SAAAC,GAAA,MAAA,QAAAA,EAAAb,OAnID,IAAIS,UACAK,UAAa,YADbL,SAAW,WACXM,SAAA,gBACAC,UAAY,UACZC,UAAY,aACZC,UAAa,cACbC,SAAA,aACAC,SAAA,YACAC,UAAY,YACZC,SAAY,UACZC,SAAA,UACAC,UAAY,eACZC,QAAA,qBACAC,UAAa,YAEbC,UAAa,YAGbC,SAAY,WADZC,cAAa,WACbC,QAAA,YACAC,WAAA,YACAC,YAAW,YACXC,WAAc,WACdC,UAAA,WACAC,UAAA,YACAC,QAAA,WACAC,QAAA,WACAC,aAAW,YACXC,qBA1BW,UA2BX7B,UAAA,aA3BJ8B,wBAAAC,QAAAlD,QAgCAiD,wBAAIA,OAA0BC,QAAQlD,QAAtCkB,SAAAC,WAAA,GAEA8B,IAAAA","file":"helpers.js","sourcesContent":["var cityDict = {\n    '248169543': 'Ditzingen',\n    '89317467': 'Leonberg',\n    '58922085': 'Sindelnfingen',\n    '249665541': 'Musberg',\n    '157476409': 'Steinbronn',\n    '124873928': 'Filderstadt',\n    '78784342': 'Ostfildern',\n    '98860443': 'Neuhausen',\n    '151269436': 'Esslingen',\n    '13734131': 'Altbach',\n    '90947800': 'Remseck',\n    '216687444': 'Kornwestheim',\n    '7970225': 'Korntal-Münchingen',\n    '199885805': 'Stuttgart',\n\n    'Ditzingen': '248169543',\n    'Leonberg': '89317467',\n    'Sindelnfingen': '58922085',\n    'Musberg': '249665541',\n    'Steinbronn': '157476409',\n    'Filderstadt': '124873928',\n    'Ostfildern': '78784342',\n    'Neuhausen': '98860443',\n    'Esslingen': '151269436',\n    'Altbach': '13734131',\n    'Remseck': '90947800',\n    'Kornwestheim': '216687444',\n    'Korntal-Münchingen': '7970225',\n    'Stuttgart': '199885805'\n}\n\nvar cityIDsWithoutStuttgart = cityIDs.slice()\n\ncityIDsWithoutStuttgart.splice(cityIDs.indexOf(cityDict.Stuttgart), 1)\n\nvar debugged = []\n\nfunction attatchDebugger(obj) {\n    debugged.push(obj)\n}\n\nfunction resize(canvas) {\n    var sidebarWidth = $('body').hasClass('nav-active') ? $('#sidebar').width() : 0\n\n    environment.scale = min(canvas.windowHeight / 500, (canvas.windowWidth - sidebarWidth) / 550);\n    canvas.resizeCanvas(canvas.windowWidth - sidebarWidth + 100, canvas.windowHeight);\n}\n\nfunction findStuckCar() {\n    var stuckCars = cars.map(function(car) { return car.isStuck })\n\n    return stuckCars[floor(random(0, stuckCars.length))]\n}\n\nfunction hsv2rgb(hue, saturation, vibrancy) {\n    // adapted from http://schinckel.net/2012/01/10/hsv-to-rgb-in-javascript/\n    var rgb, i,\n        data = [];\n\n    if(saturation === 0) {\n        rgb = [vibrancy, vibrancy, vibrancy];\n    } else {\n        hue /= 60;\n\n        i = Math.floor(hue);\n        data = [\n            vibrancy * (1 - saturation),\n            vibrancy * (1 - saturation * (hue - i)),\n            vibrancy * (1 - saturation * (1 - (hue - i)))\n        ];\n        switch (i) {\n        case 0:\n            rgb = [vibrancy, data[2], data[0]];\n            break;\n        case 1:\n            rgb = [data[1], vibrancy, data[0]];\n            break;\n        case 2:\n            rgb = [data[0], vibrancy, data[2]];\n            break;\n        case 3:\n            rgb = [data[0], data[1], vibrancy];\n            break;\n        case 4:\n            rgb = [data[2], data[0], vibrancy];\n            break;\n        default:\n            rgb = [vibrancy, data[0], data[1]];\n            break;\n        }\n    }\n\n    return '#' + rgb.map(function(x) {\n        return ('0' + Math.round(x * 255).toString(16)).slice(-2);\n    }).join('');\n}\n\nfunction chargeToColor(charge) {\n    charge *= 1 / environment.simulation.carChargeLimit\n    if(charge > 1) {\n        charge = 1\n    }\n    var hue = 120 * charge\n    var sat = abs(charge - 50) / 50\n\n    return hsv2rgb(hue, sat, 1)\n}\n\nfunction addToQueue(thing) {\n    if(thing.type == 'city') {\n        queue.push(thing)\n    } else if(thing.type == 'car') {\n        var pos = queue.findIndex((elem) => elem.type != 'car')\n\n        if(pos < 0) {\n            pos = queue.length\n        }\n\n        queue.splice(pos, 0, thing);\n    }\n}\n\nfunction fillQueueWithCities() {\n    for(var cityIndex in cities) {\n        var city = cities[cityIndex];\n\n        if(city.needsCharging() && city.id != cityDict.Stuttgart) {\n            Events.trigger('cityNeedsCharging', city)\n        }\n    }\n}\n\nfunction clearQueueFromCities() {\n    queue = queue.filter((item) => item.type != 'city')\n}\n"]}