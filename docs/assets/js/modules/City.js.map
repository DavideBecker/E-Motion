{"version":3,"sources":["modules/City.js"],"names":["cities","City","node","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","parkedCars","charge","name","cityDict","id","type","push","Node","target","length","pop","driveTo","find","car","capacity","environment","simulation","carChargeLimit","difference","total","i","updateAverageCharge","getChargePercentage","driveHome","fill","noStroke","chargeToColor","ellipse","x","scale","y","render"],"mappings":"43BAAIA,UAEEC,iBACF,SAAAA,EAAYC,GAAMC,gBAAAC,KAAAH,GAAA,IAAAI,EAAAC,2BAAAF,MAAAH,EAAAM,WAAAC,OAAAC,eAAAR,IAAAS,KAAAN,KACRF,IADQ,OAGdG,EAAKM,cACLN,EAAKO,OAAS,EACdP,EAAKQ,KAAOC,SAAST,EAAKU,IAC1BV,EAAKW,KAAO,OAEZhB,OAAOiB,KAAPZ,GARcA,qBADHa,sDAYLC,GAXVf,KAAAO,WAAkBS,QAgBJhB,KAAKO,WAAWU,MAX1BC,QAAAH,2CALc,OAAAf,KAAAO,WAAAY,KAAA,SAAAC,GASjB,OAAAA,EAAAZ,OAAAY,EAAAC,SAAAC,YAAAC,WAAAC,6DAmBmBC,GAhBhBzB,KAAGO,WAAMA,OACLP,KAAAQ,OAAAR,KAAAQ,QAAAiB,EAAAzB,KAAAQ,QAAAR,KAAAO,WAAAS,OAmBAhB,KAAKQ,OAAS,mDAZrB,IAAAkB,EAAA,EAmBG,IAAI,IAAIC,KAAK3B,KAAKO,WAAY,CAC1B,IAAIa,EAAMpB,KAAKO,WAAWoB,GAhB1BD,GAAAN,EAAOA,OAAAA,EAAaA,SAqBxBpB,KAAKQ,OAASkB,EAAQ1B,KAAKO,WAAWS,6CAflC,GAAAhB,KAAAO,WAAAS,OAAA,CAIP,IAAAI,EAAApB,KAAAO,WAAAU,MAqBGjB,KAAK4B,oBAAoBR,EAAIS,uBAC7BT,EAAIU,8CAhBAC,KAAA,IAqBJC,WAnBIN,KAAAA,WAASN,QACZW,KAAAE,cAAAjC,KAAAQ,SAGJ,aAAAR,KAAAS,KAqBOyB,QAAQlC,KAAKmC,EAAIb,YAAYc,MAAOpC,KAAKqC,EAAIf,YAAYc,MAAO,GAAKd,YAAYc,MAAO,GAAKd,YAAYc,OAEzGF,QAAQlC,KAAKmC,EAAIb,YArBXc,MAAApC,KAAAqC,EAAAf,YAAAc,MAAA,GAAAd,YAAAc,MAAA,GAAAd,YAAAc,wCA2BVpC,KAAKsC","file":"City.js","sourcesContent":["var cities = [];\n\nclass City extends Node {\n    constructor(node) {\n        super(node)\n\n        this.parkedCars = [];\n        this.charge = 1\n        this.name = cityDict[this.id]\n        this.type = 'city'\n\n        cities.push(this)\n    }\n\n    sendCarTo(target) {\n        if(!this.parkedCars.length) {\n            return\n        }\n\n        var car = this.parkedCars.pop()\n\n        // this.updateAverageCharge(car.getChargePercentage())\n        car.driveTo(target)\n    }\n\n    needsCharging() {\n        return this.parkedCars.find(function(car) {\n            return car.charge / car.capacity < environment.simulation.carChargeLimit\n        })\n    }\n\n    updateAverageCharge(difference) {\n        if(this.parkedCars.length) {\n            this.charge = this.charge + (difference - this.charge) / this.parkedCars.length\n        } else {\n            this.charge = 1\n        }\n    }\n\n    calculateAverageCharge() {\n        var total = 0;\n\n        for(var i in this.parkedCars) {\n            var car = this.parkedCars[i];\n\n            total += car.charge / car.capacity\n        }\n\n        this.charge = total / this.parkedCars.length\n    }\n\n    sendCarHome() {\n        if(!this.parkedCars.length) {\n            return\n        }\n\n        var car = this.parkedCars.pop()\n\n        this.updateAverageCharge(car.getChargePercentage())\n        car.driveHome()\n    }\n\n    render() {\n        fill(20)\n        noStroke()\n        if(this.parkedCars.length) {\n            fill(chargeToColor(this.charge))\n        }\n\n        if(this.name == 'Stuttgart') {\n            ellipse(this.x * environment.scale, this.y * environment.scale, 35 * environment.scale, 35 * environment.scale)\n        } else {\n            ellipse(this.x * environment.scale, this.y * environment.scale, 20 * environment.scale, 20 * environment.scale)\n        }\n\n    }\n\n    update() {\n        this.render();\n    }\n}\n"]}