{"version":3,"sources":["modules/Car.js"],"names":["Car","home","Nodes","getRandomTown","location","position","createVector","x","y","capacity","environment","simulation","carCapacity","charge","carChargeLimit","dischargeSpeed","chargeSpeed","type","isSlacker","Math","random","totalCarCharge","enteredCity","cars","push","driveTo","inCity","applyMatrix","strokeWeight","stroke","fill","chargeToColor","translate","scale","next","rotate","atan2","rect","carSize","resetMatrix","updatePosition","render","Vehicle"],"mappings":";;;;;;;;;;IAAMA,G;;;AACF,mBAAc;AAAA;;AAAA;;AAGV,cAAKC,IAAL,GAAYC,MAAMC,aAAN,EAAZ;AACA,cAAKC,QAAL,GAAgB,MAAKH,IAArB;AACA,cAAKI,QAAL,GAAgBC,aAAa,MAAKF,QAAL,CAAcG,CAA3B,EAA8B,MAAKH,QAAL,CAAcI,CAA5C,CAAhB;AACA,cAAKC,QAAL,GAAgBC,YAAYC,UAAZ,CAAuBC,WAAvC;AACA,cAAKC,MAAL,GAAc,MAAKJ,QAAL,GAAgBC,YAAYC,UAAZ,CAAuBG,cAArD;AACA,cAAKC,cAAL,GAAsB,OAAtB;AACA,cAAKC,WAAL,GAAmB,IAAnB;AACA,cAAKC,IAAL,GAAY,KAAZ;AACA,cAAKC,SAAL,GAAiBC,KAAKC,MAAL,MAAiB,GAAlC;;AAEAV,oBAAYC,UAAZ,CAAuBU,cAAvB,IAAyC,MAAKR,MAA9C;;AAEA,cAAKS,WAAL,CAAiB,MAAKrB,IAAtB;;AAEAsB,aAAKC,IAAL;AAjBU;AAkBb;;;;oCAEW;AACR,iBAAKC,OAAL,CAAa,KAAKxB,IAAlB;AACH;;;iCAEQ;AACL,gBAAG,KAAKyB,MAAR,EAAgB;AACZ;AACH;;AAEDC;AACAC,yBAAa,CAAb;AACAC,mBAAO,SAAP;AACAC,iBAAKC,cAAc,KAAKlB,MAAL,GAAc,KAAKJ,QAAjC,CAAL;AACAuB,sBAAU,KAAK3B,QAAL,CAAcE,CAAd,GAAkBG,YAAYuB,KAAxC,EAA+C,KAAK5B,QAAL,CAAcG,CAAd,GAAkBE,YAAYuB,KAA7E;AACA,gBAAG,KAAKC,IAAR,EAAc;AACVC,uBAAOC,MAAM,KAAK/B,QAAL,CAAcG,CAAd,GAAkB,KAAK0B,IAAL,CAAU1B,CAAlC,EAAqC,KAAKH,QAAL,CAAcE,CAAd,GAAkB,KAAK2B,IAAL,CAAU3B,CAAjE,CAAP;AACH;AACD8B,iBACI,CADJ,EAEI,CAFJ,EAGI3B,YAAY4B,OAAZ,GAAsB,GAH1B,EAII5B,YAAY4B,OAJhB,EAKI,CALJ;AAOAC;AACH;;;iCAEQ;AACL,iBAAKC,cAAL;AACA,iBAAKC,MAAL;AACH;;;;EAnDaC,O","file":"Car.js","sourcesContent":["class Car extends Vehicle {\n    constructor() {\n        super()\n\n        this.home = Nodes.getRandomTown();\n        this.location = this.home;\n        this.position = createVector(this.location.x, this.location.y);\n        this.capacity = environment.simulation.carCapacity\n        this.charge = this.capacity * environment.simulation.carChargeLimit\n        this.dischargeSpeed = 0.00185;\n        this.chargeSpeed = 0.07;\n        this.type = 'car'\n        this.isSlacker = Math.random() >= 0.1\n\n        environment.simulation.totalCarCharge += this.charge\n\n        this.enteredCity(this.home)\n\n        cars.push(this);\n    }\n\n    driveHome() {\n        this.driveTo(this.home)\n    }\n\n    render() {\n        if(this.inCity) {\n            return\n        }\n\n        applyMatrix()\n        strokeWeight(1)\n        stroke('#444444')\n        fill(chargeToColor(this.charge / this.capacity))\n        translate(this.position.x * environment.scale, this.position.y * environment.scale)\n        if(this.next) {\n            rotate(atan2(this.position.y - this.next.y, this.position.x - this.next.x))\n        }\n        rect(\n            0,\n            0,\n            environment.carSize * 1.5,\n            environment.carSize,\n            4\n        )\n        resetMatrix()\n    }\n\n    update() {\n        this.updatePosition()\n        this.render()\n    }\n}\n"]}