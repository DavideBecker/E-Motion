{"version":3,"sources":["modules/City.js"],"names":["cities","City","node","parkedCars","charge","name","cityDict","id","type","push","target","length","car","pop","driveTo","find","capacity","environment","simulation","carChargeLimit","difference","total","i","updateAverageCharge","getChargePercentage","driveHome","fill","noStroke","chargeToColor","ellipse","x","scale","y","render","Node"],"mappings":";;;;;;;;;;AAAA,IAAIA,SAAS,EAAb;;IAEMC,I;;;AACF,kBAAYC,IAAZ,EAAkB;AAAA;;AAAA,gHACRA,IADQ;;AAGd,cAAKC,UAAL,GAAkB,EAAlB;AACA,cAAKC,MAAL,GAAc,CAAd;AACA,cAAKC,IAAL,GAAYC,SAAS,MAAKC,EAAd,CAAZ;AACA,cAAKC,IAAL,GAAY,MAAZ;;AAEAR,eAAOS,IAAP;AARc;AASjB;;;;kCAESC,M,EAAQ;AACd,gBAAG,CAAC,KAAKP,UAAL,CAAgBQ,MAApB,EAA4B;AACxB;AACH;;AAED,gBAAIC,MAAM,KAAKT,UAAL,CAAgBU,GAAhB,EAAV;;AAEA;AACAD,gBAAIE,OAAJ,CAAYJ,MAAZ;AACH;;;wCAEe;AACZ,mBAAO,KAAKP,UAAL,CAAgBY,IAAhB,CAAqB,UAASH,GAAT,EAAc;AACtC,uBAAOA,IAAIR,MAAJ,GAAaQ,IAAII,QAAjB,GAA4BC,YAAYC,UAAZ,CAAuBC,cAA1D;AACH,aAFM,CAAP;AAGH;;;4CAEmBC,U,EAAY;AAC5B,gBAAG,KAAKjB,UAAL,CAAgBQ,MAAnB,EAA2B;AACvB,qBAAKP,MAAL,GAAc,KAAKA,MAAL,GAAc,CAACgB,aAAa,KAAKhB,MAAnB,IAA6B,KAAKD,UAAL,CAAgBQ,MAAzE;AACH,aAFD,MAEO;AACH,qBAAKP,MAAL,GAAc,CAAd;AACH;AACJ;;;iDAEwB;AACrB,gBAAIiB,QAAQ,CAAZ;;AAEA,iBAAI,IAAIC,CAAR,IAAa,KAAKnB,UAAlB,EAA8B;AAC1B,oBAAIS,MAAM,KAAKT,UAAL,CAAgBmB,CAAhB,CAAV;;AAEAD,yBAAST,IAAIR,MAAJ,GAAaQ,IAAII,QAA1B;AACH;;AAED,iBAAKZ,MAAL,GAAciB,QAAQ,KAAKlB,UAAL,CAAgBQ,MAAtC;AACH;;;sCAEa;AACV,gBAAG,CAAC,KAAKR,UAAL,CAAgBQ,MAApB,EAA4B;AACxB;AACH;;AAED,gBAAIC,MAAM,KAAKT,UAAL,CAAgBU,GAAhB,EAAV;;AAEA,iBAAKU,mBAAL,CAAyBX,IAAIY,mBAAJ,EAAzB;AACAZ,gBAAIa,SAAJ;AACH;;;iCAEQ;AACLC,iBAAK,EAAL;AACAC;AACA,gBAAG,KAAKxB,UAAL,CAAgBQ,MAAnB,EAA2B;AACvBe,qBAAKE,cAAc,KAAKxB,MAAnB,CAAL;AACH;;AAED,gBAAG,KAAKC,IAAL,IAAa,WAAhB,EAA6B;AACzBwB,wBAAQ,KAAKC,CAAL,GAASb,YAAYc,KAA7B,EAAoC,KAAKC,CAAL,GAASf,YAAYc,KAAzD,EAAgE,KAAKd,YAAYc,KAAjF,EAAwF,KAAKd,YAAYc,KAAzG;AACH,aAFD,MAEO;AACHF,wBAAQ,KAAKC,CAAL,GAASb,YAAYc,KAA7B,EAAoC,KAAKC,CAAL,GAASf,YAAYc,KAAzD,EAAgE,KAAKd,YAAYc,KAAjF,EAAwF,KAAKd,YAAYc,KAAzG;AACH;AAEJ;;;iCAEQ;AACL,iBAAKE,MAAL;AACH;;;;EA7EcC,I","file":"City.js","sourcesContent":["var cities = [];\n\nclass City extends Node {\n    constructor(node) {\n        super(node)\n\n        this.parkedCars = [];\n        this.charge = 1\n        this.name = cityDict[this.id]\n        this.type = 'city'\n\n        cities.push(this)\n    }\n\n    sendCarTo(target) {\n        if(!this.parkedCars.length) {\n            return\n        }\n\n        var car = this.parkedCars.pop()\n\n        // this.updateAverageCharge(car.getChargePercentage())\n        car.driveTo(target)\n    }\n\n    needsCharging() {\n        return this.parkedCars.find(function(car) {\n            return car.charge / car.capacity < environment.simulation.carChargeLimit\n        })\n    }\n\n    updateAverageCharge(difference) {\n        if(this.parkedCars.length) {\n            this.charge = this.charge + (difference - this.charge) / this.parkedCars.length\n        } else {\n            this.charge = 1\n        }\n    }\n\n    calculateAverageCharge() {\n        var total = 0;\n\n        for(var i in this.parkedCars) {\n            var car = this.parkedCars[i];\n\n            total += car.charge / car.capacity\n        }\n\n        this.charge = total / this.parkedCars.length\n    }\n\n    sendCarHome() {\n        if(!this.parkedCars.length) {\n            return\n        }\n\n        var car = this.parkedCars.pop()\n\n        this.updateAverageCharge(car.getChargePercentage())\n        car.driveHome()\n    }\n\n    render() {\n        fill(20)\n        noStroke()\n        if(this.parkedCars.length) {\n            fill(chargeToColor(this.charge))\n        }\n\n        if(this.name == 'Stuttgart') {\n            ellipse(this.x * environment.scale, this.y * environment.scale, 35 * environment.scale, 35 * environment.scale)\n        } else {\n            ellipse(this.x * environment.scale, this.y * environment.scale, 20 * environment.scale, 20 * environment.scale)\n        }\n\n    }\n\n    update() {\n        this.render();\n    }\n}\n"]}